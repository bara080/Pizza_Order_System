////////////////////////////////////////////////////////////////////////////////////////\\
//                                                                                      \\
//          ONLINE PIZZA PROJECT STORE                                                  \\
//                                                                                      \\
//          CREATED BY: BARA AHMAD MOHAMMED                                             \\
//                                                                                      \\
//                      AND                                                             \\
//                                                                                      \\
//                  YILIN GU                                                            \\
//                                                                                      \\
//                     SUBMITTED TO PROF. COLIN. P                                      \\
//                                                                                      \\
//             25TH DECEMBER, 2023                                                      \\
//////////////////////////////////////////////////////////////////////////////////////////

package com.example.eventhandler;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import javafx.scene.control.Button;
import javafx.scene.control.TextArea;

/**
 * Controller class for the Pizza Store application.
 * Manages the interaction between the user interface defined in the associated FXML file
 * and the underlying logic of the application.
 */

    public class pizzaController extends Application
    {

        /**
         * Buttons for selecting pizza options.
         */
        @FXML
        private Button bqqTop;

        @FXML
        private Button cancelButton;

        @FXML
        private Button cheddarCheese;

        @FXML
        private Button chickenTop;

        @FXML
        private Button classicType;

        @FXML
        private Button familySize;

        @FXML
        private Button goatCheese;

        @FXML
        private Button largeSize;

        @FXML
        private Button mediumSize;

        @FXML
        private Button mozzrellaCheese;

        @FXML
        private Button panType;

        @FXML
        private Button payButton;

        @FXML
        private Button regularSize;

        @FXML
        private Button roundType;

        @FXML
        private Button squareType;

        @FXML
        private Button steakTop;

        @FXML
        private Button swissCheese;

        @FXML
        private Button totalButon;

        @FXML
        private Button veggieTop;
        /**
         * Label for displaying the user's current order.
         */
        @FXML
        private Label myOrder;

        /**
         * Text area for displaying the detailed order.
         */
        @FXML
        private TextArea orderText;

        /**
         * Vertical box layout for organizing the UI components.
         */
        @FXML
        private VBox vbox;

        /**
         * Stage for the primary window of the application.
         */
        private Stage stage;

        /**
         * Scene representing the visual elements of the application.
         */
        private Scene scene;

        /**
         * Parent node representing the root of the user interface.
         */
        private Parent root;

        /**
         * Initializes the controller before the FXML file is loaded.
         * This method can be used to set up initial state or perform any necessary preparations.
         * It is automatically called by JavaFX.
         */
        @FXML
        private void initialize() {
            //
        }

        /**
         * Event handler for the button click in the associated FXML file.
         * When the button is clicked, this event handler is triggered.
         * It sets up an event handler for the roundType choice box, adding information
         * about a roundType order with a round type to the orderText.
         *
         * @param event The event generated by the button click.
         */

        @FXML
        void handleButtonClick(ActionEvent event) {
            //   TODO: write lambda function for pizza types event handler
            roundType.setOnAction(e ->
            {

                // roundType information for a single order
                String roundType = "\nRound Type";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new Mozzarella info to the existing text
                String newText = currentText + roundType + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);

            });

            /**
             * Event handler for the squareType button.
             * When the squareType  button is clicked, this event handler is triggered.
             * It appends information about a squareType order to the orderText.
             *
             * @param event The event generated by the button click.
             */

            squareType.setOnAction(e ->
            {
                //   squareType information for a single order
                String   squareType = "\nSquare Type";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new   squareType info to the existing text
                String newText = currentText +   squareType + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            /**
             * Event handler for the classicType button.
             * When the   classicType button is clicked, this event handler is triggered.
             * It appends information about a classicType order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            classicType.setOnAction(e ->
            {
                // classicType information for a single order
                String classicType = "\nClassic Type";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new classicType info to the existing text
                String newText = currentText +classicType + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            /**
             * Event handler for the panType button.
             * When the panType button is clicked, this event handler is triggered.
             * It appends information about a panType order to the orderText.
             *
             * @param event The event generated by the button click.
             */

            panType.setOnAction(e ->
            {
                // panType information for a single order
                String panType = "\nPan Type";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new panType info to the existing text
                String newText = currentText + panType + "\t\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            //   TODO: write lambda function for toppings event handler

            /**
             * Event handler for the steakTop button.
             * When the steakTop  button is clicked, this event handler is triggered.
             * It appends information about a steakTop order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            steakTop.setOnAction(e ->
            {
                // steakTop information for a single order
                String toppings = "\nTopping : Steak";
                String cost = "$10.0";

                // Get the current text from orderText
                String toppingText = orderText.getText();

                // Append the new Mozzarella info to the existing text
                String newTopping = toppingText + toppings + "\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newTopping);
            });

            /**
             * Event handler for the  bqqTop button.
             * When the bqqTop button is clicked, this event handler is triggered.
             * It appends information about a  bqqTop order to the orderText.
             *
             * @param event The event generated by the button click.
             */

            bqqTop.setOnAction(e ->
            {
                //  bqqTop information for a single order
                String  bqqTop = "\nTopping : Bbq";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new Mozzarella info to the existing text
                String newText = currentText +  bqqTop + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            /**
             * Event handler for the chickenTop button.
             * When the chickenTopbutton is clicked, this event handler is triggered.
             * It appends information about a chickenTopla order to the orderText.
             *
             * @param event The event generated by the button click.
             */

            chickenTop.setOnAction(e ->
            {
                // chickenTop information for a single order
                String chickenTop = "\nTopping : Chicken";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new Mozzarella info to the existing text
                String newText = currentText + chickenTop + "\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });



            /**
             * Event handler for the veggieTop button.
             * When the veggieTop button is clicked, this event handler is triggered.
             * It appends information about a veggieTop order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            veggieTop.setOnAction(e ->
            {
                // veggieTop information for a single order
                String veggieTop = "\nTopping : Veggies";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new veggieTop info to the existing text
                String newText = currentText +veggieTop + "\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });
            /**
             * Event handler for the familySize button.
             * When the familySize button is clicked, this event handler is triggered.
             * It appends information about a familySize order to the orderText.
             *
             * @param event The event generated by the button click.
             */


           //   TODO: write lambda function for sizes event handler
            familySize.setOnAction(e ->
            {
                // familySize information for a single order
                String familySize = "\nSize: Family";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new familySize info to the existing text
                String newText = currentText + familySize + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });
            /**
             * Event handler for the  largeSize button.
             * When the largeSize button is clicked, this event handler is triggered.
             * It appends information about al argeSize order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            largeSize.setOnAction(e ->
            {
                //  largeSize information for a single order
                String  largeSize = "\nSize: Large";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new  largeSize info to the existing text
                String newText = currentText +  largeSize + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });
            /**
             * Event handler for the regularSize button.
             * When the regularSize button is clicked, this event handler is triggered.
             * It appends information about a regularSize order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            regularSize.setOnAction(e ->
            {
                // regularSize information for a single order
                String regularSize = "\nSize: Regular";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new regularSize info to the existing text
                String newText = currentText + regularSize + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });


            /**
             * Event handler for the mediumSize button.
             * When the mediumSize button is clicked, this event handler is triggered.
             * It appends information about a medium-sized Mozzarella order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            mediumSize.setOnAction(e ->
            {
                // mediumSize information for a single order
                String mediumSize = "\nSize: Medium";
                Double cost = 15.0;

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new mediumSize info to the existing text
                String newText = currentText + mediumSize + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });


            /**
             * Event handler for the mozzrellaCheese  button.
             * When the mozzrellaCheese button is clicked, this event handler is triggered.
             * It appends information about a mozzrellaCheese order to the orderText.
             *
             * @param event The event generated by the button click.
             */


            //   TODO: write lambda function for cheese event handler


            mozzrellaCheese.setOnAction(e ->
            {
                // Mozzarella information for a single order
                String mozzarella = "\nCheese: Mozzarella";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new Mozzarella info to the existing text
                String newText = currentText + mozzarella + "\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            /**
             * Event handler for the cheddarCheese button.
             * When the cheddarCheese button is clicked, this event handler is triggered.
             * It appends information about a cheddarCheese order to the orderText.
             *
             * @param event The event generated by the button click.
             */


            cheddarCheese.setOnAction(e ->
            {
                // cheddarCheese information for a single order
                String cheddarCheese = "\nCheese: Cheddar";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new cheddarCheese info to the existing text
                String newText = currentText + cheddarCheese + "\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            /**
             * Event handler for the   goatCheese button.
             * When the   goatCheese button is clicked, this event handler is triggered.
             * It appends information about a   goatCheeseorder to the orderText.
             *
             * @param event The event generated by the button click.
             */
            goatCheese.setOnAction(e ->
            {
                // goatCheese information for a single order
                String   goatCheese = "\nCheese: Goat";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new goatCheese info to the existing text
                String newText = currentText +   goatCheese + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            /**
             * Event handler for the mediumSize button.
             * When the swissCheese button is clicked, this event handler is triggered.
             * It appends information about a  swissCheese order to the orderText.
             *
             * @param event The event generated by the button click.
             */

            swissCheese.setOnAction(e ->
            {
                //  swissCheese information for a single order
                String  swissCheese = "\nCheese: Swiss";
                String cost = "$10.0";

                // Get the current text from orderText
                String currentText = orderText.getText();

                // Append the new Mozzarella info to the existing text
                String newText = currentText +  swissCheese + "\t\t\t\t\t\t" + cost;

                // Set the updated text to orderText
                orderText.setText(newText);
            });

            //   TODO: write lambda function for total event handler

            /**
             * Event handler for the totalButon button.
             * When the totalButon button is clicked, this event handler is triggered.
             * It calculates the subtotal, tax, and total cost based on the existing order
             * information in orderText and appends the results to the orderText.
             *
             * @param event The event generated by the button click.
             */

            totalButon.setOnAction(e ->
            {
                // Get the current text from orderText
                String currentText = orderText.getText();

                // Split the text into lines
                String[] lines = currentText.split("\n");

                // Initialize variables for subtotal, total, and tax
                double subtotal = 0.0;


                // Calculate subtotal
                for (String line : lines) {
                    if (line.matches(".*\\$([\\d.]+).*")) {
                        // Use a regular expression to capture the numeric part after the dollar sign
                        String regex = "\\$\\s*([\\d.]+)";
                        Pattern pattern = Pattern.compile(regex);
                        Matcher matcher = pattern.matcher(line);

                        if (matcher.find()) {
                            String costString = matcher.group(1);
                            try {
                                subtotal += Double.parseDouble(costString);
                            } catch (NumberFormatException ex) {
                                // Handle parsing error, if any
                                ex.printStackTrace();
                            }
                        }
                    }
                }


                // Calculate tax (assuming 30% tax rate)
                double tax = 0.3 * subtotal;

                // Calculate total cost
                double total = subtotal + tax;

                // Format the results and update the orderText
                String subCost = String.format("\nSub Total : \t\t\t\t\t\t$%.2f", subtotal);
                String taxCost = String.format("\nTax (30%%) : \t\t\t\t\t\t$%.2f", tax);
                String totalCost = String.format("\nTotal Cost : \t\t\t\t\t\t$%.2f", total);

                // Set the updated text to orderText
                orderText.setText(currentText + "\n"+ "\n"+ subCost + taxCost + totalCost);
            });


            /**
             * Event handler for the mediumSize button.
             * When the mediumSize button is clicked, this event handler is triggered.
             * It appends information about a medium-sized Mozzarella order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            cancelButton.setOnAction(e ->
            {

                // Clear the text in the orderText TextArea
                orderText.clear();

            });

            /**
             * Event handler for the mediumSize button.
             * When the mediumSize button is clicked, this event handler is triggered.
             * It appends information about a medium-sized Mozzarella order to the orderText.
             *
             * @param event The event generated by the button click.
             */
            payButton.setOnAction(e -> {

                // Clear the text in the orderText TextArea
                orderText.clear();

            });


        }


        public static void main(String[] args)
        {
            launch(args);
        }

        /**
         * The main class responsible for launching the Pizza Store application.
         * It extends the Application class and overrides the start method to initialize
         * the primary stage, load the FXML file, set up the scene, and display the GUI.
         *
         * @param primaryStage The primary stage of the JavaFX application.
         * @throws IOException Signals that an I/O exception has occurred.
         */


        @Override
        public void start(Stage primaryStage) throws IOException {


            URL resourceUrl = getClass().getResource("pizza.fxml");

            if (resourceUrl != null) {
                Parent root = FXMLLoader.load(resourceUrl);

                primaryStage.setTitle("Pizza Store");
                Scene scene = new Scene(root);
                URL stylesheetUrl = getClass().getResource("styles.css");

                if (stylesheetUrl != null) {
                    scene.getStylesheets().add(stylesheetUrl.toExternalForm());
                }

                primaryStage.setScene(scene);
                primaryStage.show();
            } else {
                System.err.println("Failed to load pizza.fxml");
            }
        }

        /**
         * Switches the scene to the payment view by loading the Login.fxml file
         * and updating the current stage with the new scene.
         *
         * @param event The event triggered by the action that calls this method.
         * @throws IOException Signals that an I/O exception has occurred when loading the FXML file.
         */
        public void switchToPay(ActionEvent event) throws IOException {

            Parent root = FXMLLoader.load(getClass().getResource("Login.fxml"));
            stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
            scene = new Scene(root);
            stage.setScene(scene);
            stage.show();
        }


    }